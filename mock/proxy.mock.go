// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -destination=./mock/proxy.mock.go -package=proxymock -typed Proxy
//

// Package proxymock is a generated GoMock package.
package proxymock

import (
	context "context"
	reflect "reflect"

	message "github.com/JrMarcco/easy-rpc/message"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServiceMockRecorder) Name() *MockServiceNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockService)(nil).Name))
	return &MockServiceNameCall{Call: call}
}

// MockServiceNameCall wrap *gomock.Call
type MockServiceNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceNameCall) Return(arg0 string) *MockServiceNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceNameCall) Do(f func() string) *MockServiceNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceNameCall) DoAndReturn(f func() string) *MockServiceNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockProxy is a mock of Proxy interface.
type MockProxy struct {
	ctrl     *gomock.Controller
	recorder *MockProxyMockRecorder
	isgomock struct{}
}

// MockProxyMockRecorder is the mock recorder for MockProxy.
type MockProxyMockRecorder struct {
	mock *MockProxy
}

// NewMockProxy creates a new mock instance.
func NewMockProxy(ctrl *gomock.Controller) *MockProxy {
	mock := &MockProxy{ctrl: ctrl}
	mock.recorder = &MockProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxy) EXPECT() *MockProxyMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockProxy) Call(ctx context.Context, req *message.Req) (*message.Resp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, req)
	ret0, _ := ret[0].(*message.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockProxyMockRecorder) Call(ctx, req any) *MockProxyCallCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockProxy)(nil).Call), ctx, req)
	return &MockProxyCallCall{Call: call}
}

// MockProxyCallCall wrap *gomock.Call
type MockProxyCallCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxyCallCall) Return(arg0 *message.Resp, arg1 error) *MockProxyCallCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxyCallCall) Do(f func(context.Context, *message.Req) (*message.Resp, error)) *MockProxyCallCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxyCallCall) DoAndReturn(f func(context.Context, *message.Req) (*message.Resp, error)) *MockProxyCallCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
